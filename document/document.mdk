Title         : 迪杰斯特拉派初赛文档
Author        : hy19890811
Author        : 欧阳嘉艺
Author        : HanGH
Logo          : False
Package       : [UTF8]ctex

[TITLE]

# 算法分析
## 赛题分析 
通过对赛题的分析，这是一个Multi-Constrained Multiple shortest Paths问题
即是一个有最大通过节点数目限制的在多约束条件下求多条最短路径问题。约束条件包括以下几点：

- 最多只能经过9个节点(包括起止节点)，且重复经过的节点算多次；
- 必须经过图中注明的必经点和必经路径；
- 不能经过图中注明的红色路段，即比不经过的路径；
- 满足以上条件求出最短路径；

通过对约束条件的分析，可得出如下结论：

- 在路径的选择上需要设定并记录两个权值，即路径经过节点数和路径的距离(即路径的花费)；
- 最优路径是指路径上的节点数不超过9，且路径的距离(即花费)最小；
- 当最优路径不存在时需要给出多条参考路径；
- 经过必经点和必经路径，避开红色路段；

## 算法设计思路
通过1.1.小节的分析，可以发现最优路径是指不超过节点数限制(本题中路径包含的节点数量不超过9个节点)，且花费最小的路径。但是当最优路径不存在时，提供的参考路径需要综合考虑路径经过的节点数和路径的距离(花费)。本文认为需要提供三种类型的参考路径才能使结果具有完备性，第一种是花费最少的路径，第二种是经过节点数最少的路径。当第一种路径经过节点数较多且第二种路径的花费较多时这两种路径显然都不是合理的参考路径，所以需要提供第三种参考路径才能是结果合理且完备。第三种参考路径是指路径的花费和路径经过的节点数均相对较少，在一个合理的范围内，这种参考路径可能会存在多条，都要给出。
又由于赛题中要求有必经点和必经路径等约束条件，为了保证算法的通用性，本文将赛题的本质归结为求多源最短路径问题。

本文采用Floyd算法和贪心算法的组合，具体解决思路如下所示：

1. 排除红色路段代表不能经过的路径，通过Floyd算法求出任意两个节点之间花费最少的路径和经过节点数最少的路径以及同时包含相对较少的花费和较少的节点数的路径(下文中将这些路径统称为参考路径)并将这些路径进行保存；

2. 
在求最优路径以及参考路径时主要采用贪心算法的思想，

## 算法通用性与灵活性分析
本算法具备很强的通用性和灵活性，具体体现在以下几个方面：

- 搜索最优路径或参考路径方面：当满足所有约束条件的路径存在时，本算法可以求出所有满足约束条件的路径(包括等权路径)。
当不存在满足约束条件的路径时，本算法会搜索出所有参考路径(满足必经约束)，具体实例会在2.节中结合测试用例具体说明；

-  适应性方面：即使图的结构发生改变，例如改变图中的起点、终点、必经节点和必经路径，本算法仍然可以求出最优路径或者若干条参考路径。并且不仅适用于赛题给出的拓扑图，也适用于其他的拓扑图，具有很强的灵活性；

-  增减权值方面：目前，本赛题中对于路径的限制有两个权值，花费和经过节点数，如果题目中增添了权值，只需要在代码中增加相应限制权值的代码，仍然能够求出最优路径或参考路径，灵活性较强；

-  选取算法方面：本赛题是一个有最大通过节点数目限制的在多约束条件下求多条最短路径问题，其本质是一个求多源最短路径问题，
Floyd算法在求解多源最短路径具有较强的通用性，而本算法是基于Floyd算法进行修改，故也具有较强的通用性；

由于本赛题对于路径有花费和经过节点数两方面的限制，所以当最优路径不存在时，仅搜索出一条花费最少的路径和一条经过节点数最少的路径显然不满足题目要求。
本文设计的算法针对这两种限制具有很强的解决能力和通用性，能够搜索出所有参考路径作为参考。


## 算法时间复杂度分析

1. 在1.2.小节的步骤1中主要基于Floyd算法进行改进，故该算法的时间复杂为&Omicron;(an^3^)，其中n是指图中的节点总数；
a是指任意两个节点之间参考路径数量总和，通过约束条件的限制，参考路径数量总和在一个较小的常数范围内，故a始终是一个常数；

2. 在1.2.小节的步骤2中，通过剪枝优化处理将时间复杂度降低为&Omicron;(b^m^)，其中m是指题目中设定的必经节点以及必经路径的数量总和；
b代表一个较小的常数，具体是指起点到第一个必经节点(必经路径)之间的参考路径数量，或者必经节点(必经路径)到下一个必经节点(必经路径)的参考路径数量，
或者必经节点(必经路径)到终点的参考路径数量。故b的值可能会发生改变，但始终会在一个较小的常数范围内。
由于在多约束条件限制下，节点之间满足条件的路径数目较少，经过测试，本题中b的范围在3~4之间。

综上所述，本算法的时间复杂度为&Omicron;(an^3^)+&Omicron;(b^m^)，当图中节点总数与必经节点和必经路径数量总和相差较大时，
或者图中必经节点和必经路径数量较少时本算法时间复杂度可归结为&Omicron;(an^3^)，仍具有较好的性能。

## 算法实现分析

Madoko is a fast markdown processor for writing professional articles
with a focus on simplicity and plain text readability.

* Read the [reference manual].
* Explore the upper-right toolbox menu to discover how Markdown works. 
* `Alt-Q` reformats the current paragraph.

# 测试用例及结果分析
我们组提交的成果物中包含一个可执行文件，双击后将通过图形界面的方式进行展示。我们同样也是采用这种图形界面的方式进行测试并展示测试结果，以这种方式进行测试既直观又灵活方便，测试者可以直观的知道起点、终点、必经点、必经路径和不能走的红色路段的位置，并可随意修改这些约束调节进行测试。本文的测试用例分为两类：正常流测试和异常流测试。

- 正常流测试用例：


case1. 测试赛题给出的拓扑图及约束条件:

![case1]
[case1]: images/case1.jpg "case1" { width:auto; max-width:100% }

如上图所示，起点、终点、必经点、必经路径、不能通过的路段等约束条件均与赛题要求一致，其中节点0为起点"S"，节点17为终点"E"。在考虑路径花费和经过节点数两个权值的情况下可以搜索出两条满足所有约束条件的参考路径，通过上图右侧查看结果可知，第一条路径是距离(花费)最小且经过节点数相对较少的路径，第二条路径是经过节点数最少且距离(花费)相对较小的路径。


case2. 与某个节点相连的多条边均为必经路径，并且这个节点的多个相邻节点均为必经点:

![case2]
[case2]: images/case2.jpg "case2" { width:auto; max-width:100% }

经过修改，约束条件的设置可如上图所示，由于节点4和10的多个相邻节点和连接路径均为必经点和必经路径，存在较多的回路，故在路径花费和经过节点数相同的情况下也会存在多条参考路径。我们将所有参考路径搜索出后可通过图中右侧查看结果。"节点数:14;距离:15"的路径为满足所有约束条件下距离(花费)最小且经过节点数相对较少的路径；"节点数:12;距离:17"的路径是满足所有约束条件下经过节点数最少且距离(花费)相对较小的路径；"节点数:13;距离:16"的路径则是一条两个权值均相对较小的路径，这种路径的两个权值均在前两种路径的两个权值之间，在一个合理的范围内，本文将这种路径也当做合理的参考路径。


case3. 必经点或必经路径到终点的花费(距离)和经过节点数均大于起点(即更改起点或终点)；

![case3]
[case3]: images/case3.jpg "case3" { width:auto; max-width:100% }

将节点6设定为起点"S"，其他约束条件如上图所示，此时必经节点2、3，必经路径4->5到终点的花费(距离)和经过节点数均大于起点，此时也应该存在最优路径或参考路径。在搜索出的参考路径中"节点数:12;距离:13"的路径为满足所有约束条件下距离(花费)最小且经过节点数相对较少的路径；"节点数:10;距离:14"的路径是满足所有约束条件下经过节点数最少且距离(花费)相对较小的路径；

- 异常流测试用例


case4. 拓扑图中没有起点和终点时，会给出相应提示；

![case4]
[case4]: images/case4.jpg "case4" { width:auto; max-width:100% }
如果取消拓扑图中起点和终点的设置，运行程序后会提示"未设置起点和终点"，而并非程序崩溃。

case5. 当没有任何一条路径能够从起点到达终点时，会给出相应提示；

![case5]
[case5]: images/case5.jpg "case5" { width:auto; max-width:100% }
如上图所示，通过将连接起点的所有路径设置为不可经过的红色路段，使得没有任何一条路径能够从起点到达终点。运行程序后会给出提示，而并非程序崩溃。


Enjoy!

[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
